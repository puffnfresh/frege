{- «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»

    Copyright © 2011 - 2015, Ingo Wechsung
    All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, are permitted provided that the following
    conditions are met:

        Redistributions of source code must retain the above copyright
        notice, this list of conditions and the following disclaimer.

        Redistributions in binary form must reproduce the above
        copyright notice, this list of conditions and the following
        disclaimer in the documentation and/or other materials provided
        with the distribution. Neither the name of the copyright holder
        nor the names of its contributors may be used to endorse or
        promote products derived from this software without specific
        prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
    IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER
    OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
    LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
    USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
    AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
    IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
    THE POSSIBILITY OF SUCH DAMAGE.

    «•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•»«•» -}

{--
    Utility functions, classes and data structures for code generation
 -}

package frege.compiler.gen.Util where

import frege.Prelude hiding(print, println, break, <+>)

import Data.TreeMap (values, insert, keys)
import Data.Bits

import  Compiler.types.Kinds
import  Compiler.types.JNames
import  Compiler.types.JTypes
import  Compiler.types.Packs
import  Compiler.types.QNames
import  Compiler.types.Types
import  Compiler.types.ConstructorField
import  Compiler.types.Symbols
import  Compiler.types.Global as G

import  Compiler.classes.Nice


import frege.compiler.Utilities as U(print, println)
import Lib.PP hiding (line, group, break)
import frege.compiler.common.Annotate  
import frege.compiler.gen.Const (constClass)



--- line width for code generation
line = 96


--- lots of blanks
blanks = (packed • take 10000) (repeat ' ')


--- pretty print to stdout
pp x = do 
    g <- getSTT
    -- liftIO $ (layoutXS g.printer (best line 0 x))
    println ""


layoutIO None = return ()
layoutIO (Text s x) = do
    print s
    layoutIO x
layoutIO (Line i x) = do
    println ""
    print (substr blanks 0 (i `mod` line))
    layoutIO x


layoutXS :: PrintWriter -> Doc -> IO ()
layoutXS p None = return ()
layoutXS p (Text s x) = p.print s >> layoutXS p x
layoutXS p (Line i x) = p.println >> p.print (substr blanks 0 (i `mod` line)) >> layoutXS p x


instance Anno JName where
    anno jn = text (show jn)


instance Anno JType where
    anno (Ref  {jname,typeargs})    = text (show jname) <> annoGenerics typeargs
    anno (TArg var          )       = text var
    anno Nativ{typ="[]",
               typeargs=[jt]}       = anno jt <> text "[]"
    anno (Nativ {typ,typeargs} )    = text typ  <> annoGenerics typeargs
    anno (Lazy {yields})
        | wasFrege yields           = -- (text "/*" <> anno yields <> text "*/") <+> 
                                        text "frege.runtime.Lazy"
        | otherwise                 = -- (text "/*" <> anno yields <> text "*/") <+> 
                                        text "java.lang.Object" 
    anno Lambda                     = text ("frege.runtime.Lambda")
    anno Something                  = text ("java.lang.Object")
    anno Applicable                 = text ("frege.runtime.Applicable")

--- the most general type for anonymous fuctions
jtFun    = Lambda

--- the java type for functions with _n_ arguments
jtFunc :: Int -> JType -> JType
jtFunc n jt = Ref {jname = JName "frege.runtime" ("Fun" ++ show n), typeargs=[autoboxed jt]}


--- the @Int@ type
jtInt    = Nativ "int" []


--- The type for enum constants.
--- Using @short@ for this, java methods get a signature that is different.
jtEnum    = Nativ "short" []


jtString = Nativ { typ = "java.lang.String", typeargs = []}


jtAlgebraic = Ref {jname = JName "frege.runtime" "Algebraic", typeargs = []}


jtValue     = Ref {jname = JName "frege.runtime" "Value", typeargs = []}


--- Java name of the runtime class that provides support for exceptions 
jnWrapped   = JName "frege.runtime" "WrappedCheckedException"


--- used to construct static member functions of @Delayed@
jnDelayed   = JName "frege.runtime" "Delayed"

--- used to match @m~p@ patterns
jnFind = memberOf (JName "frege.runtime" "Regex9") "findResult" 

---  Delayed<>
jtDelayed = Ref jnDelayed []


--- create the boxed form of a java type
boxed (Lazy x) = x
boxed (Nativ "boolean" []) = Nativ {typ = "java.lang.Boolean", typeargs = []}
boxed (Nativ "byte" [])    = Nativ {typ = "java.lang.Byte", typeargs = []}
boxed (Nativ "short" [])   = Nativ {typ = "java.lang.Short", typeargs = []}
boxed (Nativ "char" [])    = Nativ {typ = "java.lang.Character", typeargs = []}
boxed (Nativ "int" [])     = Nativ {typ = "java.lang.Integer", typeargs = []}
boxed (Nativ "long" [])    = Nativ {typ = "java.lang.Long", typeargs = []}
boxed (Nativ "double" [])  = Nativ {typ = "java.lang.Double", typeargs = []}
boxed (Nativ "float" [])   = Nativ {typ = "java.lang.Float", typeargs = []}
boxed x = x


--- make the lazy form of a java type
lazy :: JType -> JType
lazy jt = case jt of
    Lazy{yields}        -> jt
    Nativ{typ}          -> Lazy (boxed jt)
    Applicable          -> jt
    Something           -> Lazy jt
    TArg{var}           -> Lazy jt
    Lambda              -> Lazy jt
    Ref{jname}          -> Lazy jt


--- make sure a native type is not primitive
autoboxed jt
    | Nativ{} <- jt    = boxed jt
    | otherwise        = jt


--- create the strict form of a boxed java type
strict x = case boxed x of
    Nativ {typ = "java.lang.Boolean", typeargs = []}   -> Nativ "boolean"  []
    Nativ {typ = "java.lang.Byte", typeargs = []}      -> Nativ "byte"  []
    Nativ {typ = "java.lang.Short", typeargs = []}     -> Nativ "short"  []
    Nativ {typ = "java.lang.Character", typeargs = []} -> Nativ "char" []
    Nativ {typ = "java.lang.Integer", typeargs = []}   -> Nativ "int" []
    Nativ {typ = "java.lang.Long", typeargs = []}      -> Nativ "long" []
    Nativ {typ = "java.lang.Double", typeargs = []}    -> Nativ "double" []
    Nativ {typ = "java.lang.Float", typeargs = []}     -> Nativ "float" []
    other -> other


-- -------------------------------------------------------------------------------------
-- ---------------------------------- Java Expressions ---------------------------------
-- -------------------------------------------------------------------------------------

{--
    A java expression
 -}
type JExpr = JX


data JX =
    JAtom {!name :: String}              --- local variable, null, this, true, false, literal etc.
    | JNew {!jt :: JType, !args :: [JExpr]}                 --- @new Foo(...)@
    | JNewClass {!jt :: JType, !args ::  [JExpr], 
                                !decls :: [JDecl]}          --- @new Foo(...) {...}@
    | JNewArray {!jt :: JType, !jex :: JExpr}               --- @new Foo[...]@
    | JInvoke {!jex :: JExpr, !args :: [JExpr]}             --- @foo(...)@
    | JStMem {!jname :: JName, !targs :: [JType]}           --- @X.name@
    | JExMem {!jex :: JExpr, !name :: String, 
                !targs :: [JType]}                          --- obj.m
    | JCast {!jt :: JType, !jex :: JExpr }                  --- (T)(x)
    | JUnop { !op :: String, !jex :: JExpr }                --- @!x@
    | JBin {!j1 :: JExpr, !op::String, !j2 :: JExpr}        --- @a + b@
    | JQC {!j1 :: JExpr, !j2 :: JExpr, !j3 :: JExpr}        --- a ? b : c
    | JArrayGet {!j1, !j2 :: JExpr }                        --- arr[i]
    where
        ---  Syntactic precedence of java constructs
        ---  Higher numbers mean more tight binding.
        prec JQC{}     = 1
        prec JBin{}    = 2
        prec JUnop{}   = 3
        prec JCast{}   = 4
        prec JArrayGet{} = 5
        prec JExMem{}  = 9
        prec JStMem{}  = 9
        prec JInvoke{} = 9
        prec JAtom{}   = 9
        prec JNew{}    = 7
        prec JNewClass{} = 7
        prec JNewArray{} = 7
        --- subex e x
        --- print @x@ or @(x)@ depending on relative precedence to @e@
        subex :: JExpr -> JExpr -> PP.DOCUMENT
        subex e x
                  | prec e == 2 && prec x <= 2 = text "(" <> anno x <> text ")"
                  | prec x < prec e = text "(" <> anno x <> text ")"
                  | otherwise                      = anno x
        --- create a 'JAtom'
        atom   = JAtom
        --- create an instance member without type arguments
        jexmem x s = JExMem{jex=x, name=s, targs=[]}
        --- @invoke args expr@ ---> expr.(args)
        invoke = flip JInvoke
        --- @new args type@    ---> new type(args)
        new    = flip JNew
        --- @cast type expr@   ---> (type) expr
        cast   = JCast
        --- @xmem "name" expr@  ---> expr.name
        xmem   = flip jexmem
        --- @static X.y@ ---> X.y
        static = flip JStMem []


--- show a java expression
showJex jex | showable jex = PP.pretty 1000 (anno jex)
            | otherwise    = "complicated java expression"


instance Anno JExpr where
    anno (JAtom {name}) = text name
    anno (JNew jt exs) = text "new" <+> jt.anno <> annoArgList exs
    anno (JInvoke (JStMem (JName "" b) []) exs) = text b <> PP.nest 4 (annoArgList exs)
    anno (JInvoke (JStMem jn gs) exs) = text a <~/> PP.nest 4 (
                            text "." <> annoGenerics gs <> text b <> annoArgList exs)
                        where
                            jns = ´\.´.splitted (show jn)
                            a = (joined "." • init) jns
                            b = last jns
    anno (e@JInvoke (JExMem jex s gs) exs) = e.subex jex <~/> PP.nest 4 (
                                    text "." <> annoGenerics gs <> text s <> annoArgList exs)
    -- anno (e@JInvoke (JExMemG jex s gs) exs) = e.subex jex <~/> PP.nest 4 (
    --                                text "." <> annoGenerics gs <> text s <> annoArgList exs)
    anno (e@JInvoke x exs) = e.subex x <> annoArgList exs
    anno (e@JCast jt x) = text "(" <> jt.anno <> text ")" <> e.subex x
    anno (JStMem (JName "" b) []) = text b
    anno (JStMem (JName a b) gs) = text a <> text "." <> annoGenerics gs <> text b
    anno (e@JExMem jex s gs) = e.subex jex <> text "." <> annoGenerics gs <> text s
    -- anno (e@JExMem jex s)     = e.subex jex <> text "." <> text s
    anno (un@JUnop op j1) = text op <+> un.subex j1
    anno (bin@JBin j1 op j2) = bin.subex j1 <+> text op <+> bin.subex j2
    anno (jqc@JQC j1 j2 j3) = jqc.subex j1
                        <+> PP.nest 4    (text "?" <+> jqc.subex j2
                                    <+/> (text ":" <+> jqc.subex j3))
    anno (get@JArrayGet{j1, j2}) = get.subex j1 <> text "[" <> anno j2 <> text "]"
    anno (JNewClass jt exs decls) = text "new"
                            <+> jt.anno
                            <>  annoArgList exs
                            <+> (PP.block "{" (PP.stack (map JDecl.anno decls)) "}")
    anno (JNewArray jt ex)
        | Nativ{typ="[]", typeargs=[it]} <- jt 
                     = text "new"
                            <+> it.anno
                            <>  text "[" <> anno ex <> text "]"
        | otherwise  = text "new"
                            <+> jt.anno
                            <>  text "[" <> anno ex <> text "]"


{--
 * Check if a 'JExpr' is cheap enough so that we can save a local variable
 *
 * Cheap java expressions are:
 * 1. a local variable
 * 2. literal, this, null etc.
 * 3. a cast of a cheap expression
 * 4. a static variable X.m
 * 5. access to a member of a cheap expression.
 *
 * This is transitive, so that X.y.z.a.b.c.d.e.f would be "cheap", but we will not
 * see this because member variables of frege types are all lazy, i.e., there will
 * be an _e() needed to go deeper. But _e() is of course not cheap.
 -}
cheap (JAtom _) = true
cheap (JCast _ ex) = cheap ex
cheap (JStMem _ _) = true
cheap (JExMem ex _ _) = cheap ex
cheap _ = false


--- when showing java expressions in comments, we want also not so cheap ones
showable jex = go 3 jex
    where
        go :: Int -> JX -> Bool
        go 0 jex = cheap jex
        go n JAtom{name}  = true
        go n (JNew _ jxs)  = all (go (n-1)) jxs 
        go n (JNewClass _ _ _)  = false
        go n (JNewArray _ jx)  = go (n-1) jx
        go n (JInvoke m args)  = all (go (n-1)) (m:args)
        go n JStMem{jname, targs}  = true
        go n JExMem{jex, name, targs}  = go (n-1) jex
        go n (JCast _ ex)  = go (n-1) ex
        go n JUnop{op, jex}  = go (n-1) jex
        go n JBin{j1, op, j2}  = go (n-1) j1 && go (n-1) j2
        go n JQC{j1, j2, j3}  = go (n-1) j1 && go (n-1) j2 && go (n-1) j3
        go n JArrayGet{j1, j2} = go (n-1) j1 && go (n-1) j2



--- placeholder for pipehole optimization
postOpt x = x


-- -------------------------------------------------------------------------------------
-- ---------------------------------- Java Statements ----------------------------------
-- -------------------------------------------------------------------------------------

{--
 * A java statement
 -}
data JStmt =
    !JError String          --- code that makes javac fail (generated by incomplete code generation)
    | JEmpty                --- empty statement
    | !JBlock  {stmts::[JStmt]}        --- { statements }
    | !JReturn JExpr         --- return expr
    | !JThrow  JExpr         --- throw expr
    | !JAssert JExpr         --- assert expr
    | !JEx     JExpr
    | !JAssign JExpr JExpr   --- a = b
    | !JLocal  {decl::JDecl}
    | !JCond   {keyword :: String, jex :: JExpr, stmts :: [JStmt]}   --- if/while (cond) { ... }
    | !JBlockX {keyword :: String, stmts :: [JStmt]}      --- try/else/catch ... { .... }
    | !JCase   {jex :: JExpr, stmt :: JStmt }


unsComment :: [JStmt] -> [JStmt]
unsComment (stmt:stmts) = case stmt  of
    JLocal{decl=JComment _} -> unsComment stmts
    other 
        | stmt.{stmts?}     -> stmt.{stmts<-unsComment} : unsComment stmts
        | otherwise         -> stmt : unsComment stmts
unsComment [] = []


instance Anno JStmt where
    anno (JError s) = (JComment s).anno </> text "FIX: incomplete code generation;"
    anno JEmpty = text ";"
    anno (JBlock []) = text "{}"
    anno (JBlock stmts) = PP.block "{" (PP.stack (map anno stmts)) "}"
    anno (JReturn ex) = text "return" <+> PP.nest 4 ((postOpt ex).anno <> text ";")
    anno (JThrow ex)  = text "throw" <+> PP.nest 4 ((postOpt ex).anno <> text ";")
    anno (JAssert ex)  = text "assert" <+> PP.nest 4 ((postOpt ex).anno <> text ";")
    anno (JEx ex) = (postOpt ex).anno <> text ";"
    anno (JAssign x1 x2) = x1.anno <+> text "=" <+> (postOpt x2).anno <> text ";"
    anno (JLocal jdecl) = jdecl.anno
    anno (JCond k x stmts) = text k <+> bracket "(" (postOpt x).anno ")"
                        <+>  anno  (JBlock stmts)
    anno (JBlockX k stmts) = text k <+> anno (JBlock stmts)
    anno (JCase x stmt) = text "case" <+> x.anno <> text ":" <+> anno stmt


-- -------------------------------------------------------------------------------------
-- ---------------------------------- Java Declarations --------------------------------
-- -------------------------------------------------------------------------------------

{--
    Java Attributes like *@final@*, *@static@* etc.
 -}
data JAttr = JUnchecked | JFinal | JPrivate | JPublic | JProtected | JStatic | JAbstract


derive Enum JAttr


derive Bounded JAttr


instance Anno JAttr where
    anno JUnchecked = text "@SuppressWarnings(\"unchecked\")"
    anno JFinal     = text "final"
    anno JPrivate   = text "private"
    anno JPublic    = text "public"
    anno JProtected = text "protected"
    anno JStatic    = text "static"
    anno JAbstract  = text "abstract"


type Attributes = BitSet JAttr


--- @setFlag flags f@ set flag /f/ in /flags/
setFlag :: Attributes -> JAttr -> Attributes
setFlag flags f = flags.unionE f


--- @isOn flags f@ tells if flag /f/ is set in /flags/
isOn :: Attributes -> JAttr -> Bool
isOn    = flip BitSet.member


{-- construct a set that holds the attributes -}
attrs = fold setFlag Attributes.empty

--- just @final@
!attrFinal = attrs [JFinal]
--- @final public static@
!attrTop   = attrs [JFinal, JPublic, JStatic]


--- annotate attributes
annoAttrs :: Attributes -> DOCUMENT
annoAttrs flags
    | null flags = PP.nil
    | otherwise  = (PP.spread . map anno . filter (BitSet.`member` flags)) [minBound .. maxBound]


--- annotate generic part of a type
annoGenerics :: [JType] -> DOCUMENT
annoGenerics [] = PP.nil
annoGenerics [x] = text "<" <> anno x <> text ">"
annoGenerics xs = bracket "<" (PP.sep "," (map anno xs)) ">"


--- annotate list of classes that are implemented
annoImplements _ [] = PP.nil
annoImplements s xs = text s <+> PP.sep "," (map anno xs)


--- annotate a formal method argument
-- annoArg (0, _, jt, s) = JType.anno jt <+> text s
annoArg :: FormalArg -> DOCUMENT
annoArg (n, _, jt, s) = annoAttrs n <+> JType.anno jt <+> text s


-- annotate a formal argument list
annoArgDef  []   = text "()"
annoArgDef  args = bracket "(" (PP.sep "," (map annoArg args)) ")"


--- annotate an actual argument list
annoArgList :: [JExpr] -> DOCUMENT
annoArgList []   = text "()"
annoArgList args = bracket "(" (PP.sep "," (map anno args)) ")"


type FormalArg = (Attributes, Sigma, JType, String)


{--
    Java Declarations
 -}
data JDecl =
      JComment String
    | !JClass {attr::Attributes, jtype :: JType,
                extend :: Maybe JType, implement :: [JType], defs :: [JDecl] }
    | !JInterface {attr::Attributes, jtype :: JType,
                implement :: [JType], defs :: [JDecl] }
--    | JTCInterface {attr::Int, jtype :: JType,
--                implement :: [JType], defs :: [JDecl] }
    | !JMethod {attr::Attributes, gargs :: [JType], jtype:: JType, name :: String,
               args::[FormalArg], body:: JStmt}
    | !JConstr {attr::Attributes, jtype::JType, args::[FormalArg], body:: JStmt}
    | !JMember {attr::Attributes, jtype::JType, name::String, init::Maybe JExpr}
    | !JWhile  {body::JStmt}


--- make a statement comment
sComment = (JLocal • JComment)


unComment (decl:decls) = case decl of
    JComment _              = unComment decls
    other
        | decl.{defs?}      = decl.{defs<-unComment} : unComment decls
        | decl.{body?}      = decl.{body<-unsBlock} : unComment decls
        | otherwise         = decl : unComment decls
        where
            unsBlock :: JStmt -> JStmt
            unsBlock s
                | s.{stmts?} = s.{stmts<-unsComment}
                | otherwise  = s
unComment [] = []


--- 'JDecl's are annotatable
instance Anno JDecl where
    anno (JComment s)       = text "// " <> text s -- <> PP.line
    anno (cl@JClass {attr}) = annoAttrs attr <+> text "class"
                        <+> JType.anno (cl.jtype)
                        <+> bracket ""
                             (maybe PP.nil ((text "extends" <+>) • JType.anno) cl.extend
                             <+> annoImplements "implements" cl.implement) ""
                        <+> PP.block "{" (PP.stack (map anno cl.defs)) "}"
    anno (cl@JInterface {attr}) = annoAttrs attr <+> text "interface"
                        <+> JType.anno (cl.jtype)
                        <+> bracket "" (annoImplements "extends" cl.implement) ""
                        <+> PP.block "{" (PP.stack (map anno cl.defs)) "}"
--    anno (cl@JTCInterface {attr}) = annoAttrs attr <+> text "interface"
--                        <+> JType.anno (cl.jtype)
--                        <+> bracket "" (annoImplements "extends" cl.implement) ""
--                        <+> PP.block "{" (PP.stack (map anno cl.defs)) "}"
    anno (m@JMethod {attr}) = annoAttrs m.attr
                        <+> annoGenerics (m.gargs)
                        <+> m.jtype.anno
                        <+> text m.name
                        <> annoArgDef m.args
                        <+> m.body.anno
    anno (m@JConstr {attr}) = annoAttrs m.attr
                        <+> xtype.anno
                        <> annoArgDef m.args
                        <+> m.body.anno
            where
                xtype | m.jtype.{typeargs?} = m.jtype.{typeargs=[]}
                      | otherwise           = m.jtype
    anno (m@JMember {attr}) = annoAttrs m.attr
                        <+> m.jtype.anno <+> text m.name
                        <+> bracket (maybe "" (const ("= ")) m.init)
                                        (maybe PP.nil (JExpr.anno • postOpt) m.init)
                                    ";"
    anno JWhile{body} = text "while (true)" <+> anno body


{--
    Replace all generic type variables with "?" in the expr
    
    This is used for generation of the lazy codes in 
    the @eval()@ method of the @LambdaNx@ classes, where we cannot
    introduce the type variables. 
-}
replTVar (TArg _)               = TArg "?"
replTVar (Ref name args)        = Ref name (map replTVar args)
replTVar Nativ { typ, typeargs }   = Nativ   {typ, typeargs = map replTVar typeargs}
replTVar Lazy  { yields  }      = Lazy    {yields = replTVar yields}
replTVar Lambda                 = Lambda
replTVar Something              = Something
replTVar Applicable             = Applicable


{--
    Replace all generic type variables with "?" in the expr
    
    This is used for generation of the lazy codes in 
    the @eval()@ method of the @LambdaNx@ classes, where we cannot
    introduce the type variables. 
-}
replTVarExpr (JNew typ exprs)          = JNew      (replTVar typ) (map replTVarExpr exprs)
replTVarExpr (JNewArray typ expr)      = JNewArray (replTVar typ) (replTVarExpr expr)
replTVarExpr (JCast typ expr)          = JCast     (replTVar typ) (replTVarExpr expr) 
replTVarExpr (JInvoke expr exprs)      = JInvoke   (replTVarExpr expr) (map replTVarExpr exprs)
replTVarExpr JStMem{jname, targs}      = JStMem{jname, targs = map replTVar targs}
replTVarExpr JExMem{jex, name, targs}  = JExMem{jex = replTVarExpr jex, name, targs = map replTVar targs}
replTVarExpr JUnop{op, jex}            = JUnop{op, jex = replTVarExpr jex}
replTVarExpr JBin {j1,op,j2}           = JBin{op, j1 = replTVarExpr j1, j2 = replTVarExpr j2}
replTVarExpr JQC  {j1, j2, j3}         = JQC {j1 = replTVarExpr j1, j2 = replTVarExpr j2, j3 = replTVarExpr j3}
replTVarExpr JNewClass{}          = error "Can't handle JNewClass in replTVarExpr"
replTVarExpr expr                 = expr


{--
    Replace all generic type variables with "?" in the statement
    
    This is used for generation of the lazy codes in 
    the @eval()@ method of the @LambdaNx@ classes, where we cannot
    introduce the type variables. 
-}
replTVarStmt (JBlock stmts)        = JBlock    (map replTVarStmt stmts)
replTVarStmt (JReturn  jex)        = JReturn   (replTVarExpr jex)
replTVarStmt (JThrow   jex)        = JThrow    (replTVarExpr jex)
replTVarStmt (JAssert  jex)        = JAssert   (replTVarExpr jex)
replTVarStmt (JEx      jex)        = JEx       (replTVarExpr jex)
replTVarStmt (JAssign  jex1 jex2)  = JAssign   (replTVarExpr jex1) (replTVarExpr jex1)
replTVarStmt (JCond s  jex stmts)  = JCond s   (replTVarExpr jex) (map replTVarStmt stmts)
replTVarStmt (JBlockX s    stmts)  = JBlockX s (map replTVarStmt stmts)
replTVarStmt (JCase    jex  stmt)  = JCase     (replTVarExpr jex) (replTVarStmt stmt)
replTVarStmt JLocal{decl}
    | JComment _ <- decl           = JLocal{decl}
    | otherwise                    = error "Can't replTVarStmt JLocal" 
replTVarStmt stmt                  = stmt


--- Compute the 'JType' for a given 'Sigma' type 
sigmaJT g (ForAll _ rho)        = rhoJT g rho


--- Compute the 'JType' for a given 'Rho' type
rhoJT   g (fun@RhoFun _ _ _)    = Lambda  
rhoJT   g (RhoTau {tau})        = tauJT g tau


--- Compute the 'JType' for a given 'Tau' type
tauJT   g (app@TApp a b)
     | Just (a,b) <- app.getFun     = Lambda
     | Just array <- arrayTau g app = array 
     | otherwise = case app.flat of
         (TCon {pos,name}):rest -> taujtApp g name rest app
         other                  -> Something     -- we know nothing about it
 
tauJT   g (ty@TCon {pos, name})    = taujtApp g name [] ty
 
tauJT   g (TVar {var,kind})
     | kind == KGen             = targ var 
     | otherwise                = Something
tauJT   g (Meta meta)
     | meta.kind == KGen        = TArg ("GT" ++ show meta.uid)
     | otherwise                = Something
tauJT   g (TSig sig)            = sigmaJT g sig


taujtApp g qname rest app
    | Just (sym@SymT{}) <- g.findit qname = case sym of
        SymT {product=true, newt=true} ->
             let sigmas = [ ConField.typ f | sym@SymD {flds} <- values sym.env, f <- flds ]
             in case sigmas of
                 []     -> Prelude.error (nice sym g ++ " has no fields")                     
                 (s:_)  -> (sigmaJT g . flip U.substSigma s . U.unifySigma g sym.typ) rsig
                    where
                        rsig = ForAll [] (RhoTau [] app) 
        SymT {product,nativ,enum,pur}
              -- U.pri
              | Just s <- nativ = if s `elem` primitiveTypes
                                    then Nativ {typ=s, typeargs=[]}
                                    else Nativ {typ=s, 
                                              typeargs = map (boxed . tauJT g) args}
              | enum            = jtEnum
              | otherwise       = Ref {jname = U.javaName g qname, typeargs = []}
              where args = [ jt | (KGen, jt) <- zip sym.typ.kinds rest ]     
        other -> undefined   -- can not happen because catched in U.findT
    | otherwise = Prelude.error (nice qname g ++ " not a type")


--- make a type argument from a name
targ s = TArg {var = if s ~ ´^any(\d+)?$´ then "?" else "Τ" ++ s}
                                                      -- ^ this is a greek uppercase Tau


--- type arguments for sigma type
targs :: Sigma -> [JType]
targs = filter (("?" !=) . JType.var) 
             . map (targ . fst) 
             . filter ((KGen==) . snd) 
             . Sigma.bound


--greek (s@#^[a-z]$#) = ctos (alphabet.charAt (ord (s.charAt 0) - ord 'a'))
--greek s = "Σ" ++ s
--alphabet = "αβγδεζηθιßκλμνξοπρςστυφχψωﬁﬂƒ"
--
--
numbers = (map show (iterate (1+) 1))


xxxNames xxx = zipWith (++) (repeat xxx) numbers


--- arg$1, arg$2, arg$3, ....
argNames = xxxNames "arg$"


--- ctx$1, ctx$2, ctx$3, ...
ctxNames = xxxNames "ctx$"


--- mem1, mem2, mem3 ...
memNames = xxxNames "mem"


{--
    Tell if a java type is a mapped Frege type
    -}
wasFrege Ref{}          = true
wasFrege Lazy{yields}   = wasFrege yields
wasFrege Lambda         = true
wasFrege _              = false


{--
     Check if a given java type is a primitive one.
     Return 'Nothing' if this is no primitive type
     or 'Just' _s_, where _s_ is a string like "int" that describes the type.
-}
isPrimitive (Nativ s _) | s `elem` primitiveTypes   = Just s
isPrimitive _ = Nothing


{--
    Substitue java member names in constructor fields.
    The resulting list satisifes @all (isJust . Field.name)@
    -}
namedFields flds = zipWith nf flds memNames
    where
        nf :: ConField QName -> String -> ConField QName
        nf field member = field.{name <- Just . maybe member ("mem$" ++)}


{--
    Set up the 'Global.gen.lambdas' tree by checking all imported packages
    for function pointers they have and remembering them.
-}
setupLambdas = do
    g <- getST
    forM_ (filter (!= g.thisPack) (keys g.sub.funPointers)) functionsFor 
    return ()


--- enter the function pointers of the given package to the lambdas tree
functionsFor pack = do
        g <- getST
        case g.sub.funPointers.lookup pack of
            Nothing  -> return ()
            Just fps -> do
                let qual = if U.hasJavaImport pack g
                                then JName{qual=(g.packClass pack).base, 
                                            base = constClass g}
                                else memberOf (g.packClass pack) (constClass g)
                forM_ fps (makeEntry qual)
    where
        makeEntry qual (qname, jname) = do
            g <- getST
            sym <- U.findVD qname
            changeST Global.{
                gen <- GenSt.{
                    lambdas <- insert sym (Just (memberOf qual jname))}} 
            return ()


{--
    Check if argument is 'Mutable' @a b@, and if so, return @b@
-}
isMutable (TApp (TApp con _) b) 
    | TCon{name = TName pack "Mutable"} <- con,
      pack == pPreludeIO = Just b
    | otherwise          = Nothing
isMutable _ = Nothing


{--
    Check if a type is a 'JArray' where @t@ is not a type variable.
    If so, return a 'JType' that encodes the true java array type.
    
    Example:
    
    > arrayTau (JArray s Int) = Just (Nativ "int[]")
-}
arrayTau :: Global -> Tau -> Maybe JType
arrayTau g tau
    | Just t <- isMutable tau = arrayTau g t
    | TApp con b <- tau,
      TCon{name = TName pack "JArray"} <- con,
      pack == pPreludeArrays = case arrayTau g b of
        Just (sub@Nativ{typ, typeargs}) -> Just Nativ{typ="[]", typeargs=[sub]}
        _ -> case tauJT g b of
            Something -> Just Something     -- will cause casting to correct type if needed
            jt -> Just Nativ{typ="[]", typeargs=[jt]}
    | otherwise = Nothing


